<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.0">
  <compounddef id="readjson_8hpp" kind="file">
    <compoundname>readjson.hpp</compoundname>
    <includes refid="json_8h" local="no">json/json.h</includes>
    <includes local="no">fstream</includes>
    <includes local="no">stdexcept</includes>
    <includedby refid="auth_8hpp" local="yes">auth.hpp</includedby>
    <includedby refid="data__reader_8hpp" local="yes">data_reader.hpp</includedby>
    <includedby refid="config_8hpp" local="yes">config.hpp</includedby>
    <includedby refid="fix__json_8cpp" local="yes">fix_json.cpp</includedby>
    <includedby refid="json__rated_8hpp" local="yes">json_rated.hpp</includedby>
    <includedby refid="newstab_8hpp" local="yes">newstab.hpp</includedby>
    <includedby refid="tigmaker_8cpp" local="yes">tigmaker.cpp</includedby>
    <includedby refid="gen__webdata_8cpp" local="yes">web/gen_webdata.cpp</includedby>
    <incdepgraph>
      <node id="760">
        <label>config.h</label>
        <link refid="config_8h_source"/>
      </node>
      <node id="761">
        <label>value.h</label>
        <link refid="value_8h_source"/>
        <childnode refid="762" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="765" relation="include">
        </childnode>
      </node>
      <node id="762">
        <label>forwards.h</label>
        <link refid="forwards_8h_source"/>
        <childnode refid="760" relation="include">
        </childnode>
      </node>
      <node id="773">
        <label>stdexcept</label>
      </node>
      <node id="763">
        <label>string</label>
      </node>
      <node id="766">
        <label>reader.h</label>
        <link refid="reader_8h_source"/>
        <childnode refid="767" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="768" relation="include">
        </childnode>
        <childnode refid="769" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
      </node>
      <node id="765">
        <label>map</label>
      </node>
      <node id="772">
        <label>fstream</label>
      </node>
      <node id="769">
        <label>stack</label>
      </node>
      <node id="764">
        <label>vector</label>
      </node>
      <node id="758">
        <label>json/json.h</label>
        <link refid="json_8h_source"/>
        <childnode refid="759" relation="include">
        </childnode>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="766" relation="include">
        </childnode>
        <childnode refid="771" relation="include">
        </childnode>
        <childnode refid="767" relation="include">
        </childnode>
      </node>
      <node id="771">
        <label>writer.h</label>
        <link refid="writer_8h_source"/>
        <childnode refid="761" relation="include">
        </childnode>
        <childnode refid="764" relation="include">
        </childnode>
        <childnode refid="763" relation="include">
        </childnode>
        <childnode refid="770" relation="include">
        </childnode>
      </node>
      <node id="759">
        <label>autolink.h</label>
        <link refid="autolink_8h_source"/>
        <childnode refid="760" relation="include">
        </childnode>
        <childnode refid="759" relation="include">
        </childnode>
      </node>
      <node id="770">
        <label>iostream</label>
      </node>
      <node id="768">
        <label>deque</label>
      </node>
      <node id="767">
        <label>features.h</label>
        <link refid="features_8h_source"/>
        <childnode refid="762" relation="include">
        </childnode>
      </node>
      <node id="757">
        <label>readjson.hpp</label>
        <link refid="readjson.hpp"/>
        <childnode refid="758" relation="include">
        </childnode>
        <childnode refid="772" relation="include">
        </childnode>
        <childnode refid="773" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="780">
        <label>config.hpp</label>
        <link refid="config_8hpp_source"/>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="781" relation="include">
        </childnode>
      </node>
      <node id="786">
        <label>newstab.hpp</label>
        <link refid="newstab_8hpp_source"/>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="785">
        <label>json_rated.hpp</label>
        <link refid="json__rated_8hpp_source"/>
        <childnode refid="781" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="782">
        <label>json_installed.hpp</label>
        <link refid="json__installed_8hpp_source"/>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="776">
        <label>tiggit.cpp</label>
        <link refid="tiggit_8cpp_source"/>
      </node>
      <node id="781">
        <label>gameinfo.hpp</label>
        <link refid="gameinfo_8hpp_source"/>
        <childnode refid="782" relation="include">
        </childnode>
        <childnode refid="783" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="779">
        <label>web/gen_webdata.cpp</label>
        <link refid="gen__webdata_8cpp_source"/>
      </node>
      <node id="777">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp_source"/>
        <childnode refid="778" relation="include">
        </childnode>
        <childnode refid="776" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
      </node>
      <node id="778">
        <label>auto_update.hpp</label>
        <link refid="auto__update_8hpp_source"/>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="775">
        <label>auth.hpp</label>
        <link refid="auth_8hpp_source"/>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="783">
        <label>listkeeper.hpp</label>
        <link refid="listkeeper_8hpp_source"/>
        <childnode refid="776" relation="include">
        </childnode>
      </node>
      <node id="774">
        <label>readjson.hpp</label>
        <link refid="readjson.hpp"/>
        <childnode refid="775" relation="include">
        </childnode>
        <childnode refid="777" relation="include">
        </childnode>
        <childnode refid="780" relation="include">
        </childnode>
        <childnode refid="784" relation="include">
        </childnode>
        <childnode refid="785" relation="include">
        </childnode>
        <childnode refid="786" relation="include">
        </childnode>
        <childnode refid="787" relation="include">
        </childnode>
        <childnode refid="779" relation="include">
        </childnode>
      </node>
      <node id="784">
        <label>fix_json.cpp</label>
        <link refid="fix__json_8cpp_source"/>
      </node>
      <node id="787">
        <label>tigmaker.cpp</label>
        <link refid="tigmaker_8cpp_source"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="readjson_8hpp_1a049437e4cffc2b99359f409bd31d1071" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void writeJson</definition>
        <argsstring>(const std::string &amp;file, const Json::Value &amp;value, bool fast=false)</argsstring>
        <name>writeJson</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>fast</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/readjson.hpp" line="28" bodyfile="/Users/ericgallager/Tiggit/readjson.hpp" bodystart="27" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="readjson_8hpp_1ae3451c8a6b7be6bc517e229b5392e952" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Json::Value</type>
        <definition>Json::Value readJson</definition>
        <argsstring>(const std::string &amp;file)</argsstring>
        <name>readJson</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/readjson.hpp" line="45" bodyfile="/Users/ericgallager/Tiggit/readjson.hpp" bodystart="44" bodyend="59"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>__READ_JSON_HPP</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__READ_JSON_HPP</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FIXME<sp/>/<sp/>TODO:<sp/>This<sp/>is<sp/>VERY<sp/>UNCLEAN,<sp/>and<sp/>only<sp/>works<sp/>as<sp/>long<sp/>as<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>only<sp/>have<sp/>one<sp/>cpp<sp/>file.<sp/>Once<sp/>this<sp/>changes,<sp/>this<sp/>has<sp/>to<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>outsourced<sp/>to<sp/>a<sp/>cpp<sp/>as<sp/>well.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;json/json.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;fstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="13"><highlight class="comment">Json::Value<sp/>parseJsonString(const<sp/>std::string<sp/>&amp;string)</highlight></codeline>
<codeline lineno="14"><highlight class="comment">{</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>using<sp/>namespace<sp/>Json;</highlight></codeline>
<codeline lineno="16"><highlight class="comment"></highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/>Value<sp/>root;</highlight></codeline>
<codeline lineno="18"><highlight class="comment"></highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/><sp/>Reader<sp/>reader;</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>if(!reader.parse(string,<sp/>root))</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/><sp/><sp/><sp/>throw<sp/>std::runtime_error(reader.getFormatedErrorMessages());</highlight></codeline>
<codeline lineno="22"><highlight class="comment"></highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>return<sp/>root;</highlight></codeline>
<codeline lineno="24"><highlight class="comment">}</highlight></codeline>
<codeline lineno="25"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeJson(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;value,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>fast=</highlight><highlight class="keyword">false</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>std::ofstream<sp/>of(file.c_str());</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(of)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fast)</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Json::FastWriter<sp/>w;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>&lt;&lt;<sp/>w.write(value);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>&lt;&lt;<sp/>value;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;WARNING:<sp/>Unable<sp/>to<sp/>open<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>writing\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">Json::Value<sp/>readJson(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;file)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">Json;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>std::ifstream<sp/>inf(file.c_str());</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!inf)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>read<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>file);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>Value<sp/>root;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>Reader<sp/>reader;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!reader.parse(inf,<sp/>root))</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::runtime_error(reader.getFormatedErrorMessages()<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;<sp/>reading<sp/>&quot;</highlight><highlight class="normal"><sp/>+<sp/>file);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>root;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/Tiggit/readjson.hpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.0">
  <compounddef id="gen__webdata_8cpp" kind="file">
    <compoundname>gen_webdata.cpp</compoundname>
    <includes local="no">iostream</includes>
    <includes refid="filegetter_8hpp" local="yes">filegetter.hpp</includes>
    <includes refid="data__reader_8hpp" local="yes">data_reader.hpp</includes>
    <includes refid="readjson_8hpp" local="yes">readjson.hpp</includes>
    <includes refid="tag__sorter_8hpp" local="yes">tag_sorter.hpp</includes>
    <incdepgraph>
      <node id="965">
        <label>config.h</label>
        <link refid="config_8h_source"/>
      </node>
      <node id="978">
        <label>boost/algorithm/string.hpp</label>
      </node>
      <node id="947">
        <label>filegetter.hpp</label>
        <link refid="filegetter_8hpp_source"/>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="950" relation="include">
        </childnode>
        <childnode refid="953" relation="include">
        </childnode>
        <childnode refid="957" relation="include">
        </childnode>
      </node>
      <node id="974">
        <label>config.hpp</label>
        <link refid="config_8hpp_source"/>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="951" relation="include">
        </childnode>
        <childnode refid="962" relation="include">
        </childnode>
      </node>
      <node id="955">
        <label>assert.h</label>
      </node>
      <node id="966">
        <label>value.h</label>
        <link refid="value_8h_source"/>
        <childnode refid="967" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="960" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
      </node>
      <node id="967">
        <label>forwards.h</label>
        <link refid="forwards_8h_source"/>
        <childnode refid="965" relation="include">
        </childnode>
      </node>
      <node id="961">
        <label>stdint.h</label>
      </node>
      <node id="948">
        <label>stdlib.h</label>
      </node>
      <node id="975">
        <label>tag_sorter.hpp</label>
        <link refid="tag__sorter_8hpp_source"/>
        <childnode refid="959" relation="include">
        </childnode>
        <childnode refid="960" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="968" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
      </node>
      <node id="949">
        <label>stdexcept</label>
      </node>
      <node id="953">
        <label>curl_get.hpp</label>
        <link refid="curl__get_8hpp_source"/>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="954" relation="include">
        </childnode>
        <childnode refid="955" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
      </node>
      <node id="952">
        <label>string</label>
      </node>
      <node id="969">
        <label>reader.h</label>
        <link refid="reader_8h_source"/>
        <childnode refid="970" relation="include">
        </childnode>
        <childnode refid="966" relation="include">
        </childnode>
        <childnode refid="971" relation="include">
        </childnode>
        <childnode refid="972" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="946" relation="include">
        </childnode>
      </node>
      <node id="968">
        <label>map</label>
      </node>
      <node id="956">
        <label>fstream</label>
      </node>
      <node id="945">
        <label>web/gen_webdata.cpp</label>
        <link refid="gen_webdata.cpp"/>
        <childnode refid="946" relation="include">
        </childnode>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="958" relation="include">
        </childnode>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="975" relation="include">
        </childnode>
      </node>
      <node id="954">
        <label>curl/curl.h</label>
      </node>
      <node id="958">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp_source"/>
        <childnode refid="959" relation="include">
        </childnode>
        <childnode refid="948" relation="include">
        </childnode>
        <childnode refid="951" relation="include">
        </childnode>
        <childnode refid="947" relation="include">
        </childnode>
        <childnode refid="962" relation="include">
        </childnode>
        <childnode refid="974" relation="include">
        </childnode>
      </node>
      <node id="959">
        <label>datalist.hpp</label>
        <link refid="datalist_8hpp_source"/>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="960" relation="include">
        </childnode>
        <childnode refid="961" relation="include">
        </childnode>
      </node>
      <node id="972">
        <label>stack</label>
      </node>
      <node id="960">
        <label>vector</label>
      </node>
      <node id="963">
        <label>json/json.h</label>
        <link refid="json_8h_source"/>
        <childnode refid="964" relation="include">
        </childnode>
        <childnode refid="966" relation="include">
        </childnode>
        <childnode refid="969" relation="include">
        </childnode>
        <childnode refid="973" relation="include">
        </childnode>
        <childnode refid="970" relation="include">
        </childnode>
      </node>
      <node id="951">
        <label>boost/filesystem.hpp</label>
      </node>
      <node id="973">
        <label>writer.h</label>
        <link refid="writer_8h_source"/>
        <childnode refid="966" relation="include">
        </childnode>
        <childnode refid="960" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
        <childnode refid="946" relation="include">
        </childnode>
      </node>
      <node id="964">
        <label>autolink.h</label>
        <link refid="autolink_8h_source"/>
        <childnode refid="965" relation="include">
        </childnode>
        <childnode refid="964" relation="include">
        </childnode>
      </node>
      <node id="950">
        <label>tmpdir.hpp</label>
        <link refid="tmpdir_8hpp_source"/>
        <childnode refid="951" relation="include">
        </childnode>
        <childnode refid="952" relation="include">
        </childnode>
      </node>
      <node id="946">
        <label>iostream</label>
      </node>
      <node id="971">
        <label>deque</label>
      </node>
      <node id="957">
        <label>decodeurl.hpp</label>
        <link refid="decodeurl_8hpp_source"/>
        <childnode refid="952" relation="include">
        </childnode>
      </node>
      <node id="970">
        <label>features.h</label>
        <link refid="features_8h_source"/>
        <childnode refid="967" relation="include">
        </childnode>
      </node>
      <node id="977">
        <label>set</label>
      </node>
      <node id="962">
        <label>readjson.hpp</label>
        <link refid="readjson_8hpp_source"/>
        <childnode refid="963" relation="include">
        </childnode>
        <childnode refid="956" relation="include">
        </childnode>
        <childnode refid="949" relation="include">
        </childnode>
      </node>
      <node id="976">
        <label>algorithm</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_sort_base" prot="public">SortBase</innerclass>
    <innerclass refid="struct_title_sort" prot="public">TitleSort</innerclass>
    <innerclass refid="struct_rate_sort" prot="public">RateSort</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="gen__webdata_8cpp_1a511b988e5403b786f858b2554e645bf2" prot="public" static="no" mutable="no">
        <type>const string</type>
        <definition>const string basedir</definition>
        <argsstring></argsstring>
        <name>basedir</name>
        <initializer>&quot;/home/mortennk/.tiggit/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" line="14" bodyfile="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" bodystart="14" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gen__webdata_8cpp_1a81c2843a174f86b4125eaf2dcd3c8d47" prot="public" static="no" mutable="no">
        <type>const bool</type>
        <definition>const bool writeFast</definition>
        <argsstring></argsstring>
        <name>writeFast</name>
        <initializer> true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" line="15" bodyfile="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gen__webdata_8cpp_1af2a849958c858356e13b2fdd019c88f3" prot="public" static="no" mutable="no">
        <type><ref refid="struct_data_list" kindref="compound">DataList</ref></type>
        <definition>DataList data</definition>
        <argsstring></argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" line="17" bodyfile="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" bodystart="17" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="gen__webdata_8cpp_1aa3f149a85d297b073f6eee82fb6b95e8" prot="public" static="no" mutable="no">
        <type><ref refid="struct_tig_list_reader" kindref="compound">TigListReader</ref></type>
        <definition>TigListReader reader</definition>
        <argsstring></argsstring>
        <name>reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" line="18" bodyfile="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gen__webdata_8cpp_1aaf524accc45839ceb117824f399618e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void write</definition>
        <argsstring>(const std::string &amp;file, const Json::Value &amp;v)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const Json::Value &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" line="78" bodyfile="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" bodystart="77" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="gen__webdata_8cpp_1ae66f6b31b5ad750f1fe042a706a4e3d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" line="84" bodyfile="/Users/ericgallager/Tiggit/web/gen_webdata.cpp" bodystart="83" bodyend="152"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;filegetter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;data_reader.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;readjson.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;tag_sorter.hpp&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">using<sp/>namespace<sp/></highlight><highlight class="normal">std;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>program<sp/>isn&apos;t<sp/>intended<sp/>to<sp/>by<sp/>run<sp/>by<sp/>anyone<sp/>but<sp/>me<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/><sp/><sp/>moment,<sp/>so<sp/>I<sp/>have<sp/>hard-coded<sp/>my<sp/>own<sp/>paths.<sp/>This<sp/>stop-gap<sp/>system</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/><sp/>will<sp/>likely<sp/>be<sp/>entirely<sp/>replaced<sp/>at<sp/>some<sp/>point<sp/>in<sp/>the<sp/>near<sp/>future</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/><sp/>anyway.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>basedir<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;/home/mortennk/.tiggit/&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>writeFast<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><ref refid="struct_data_list" kindref="compound">DataList</ref><sp/>data;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><ref refid="struct_tig_list_reader" kindref="compound">TigListReader</ref><sp/>reader;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="struct_sort_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_sort_base" kindref="compound">SortBase</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><ref refid="struct_data_list" kindref="compound">DataList</ref><sp/>&amp;data;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><ref refid="struct_sort_base" kindref="compound">SortBase</ref>(<ref refid="struct_data_list" kindref="compound">DataList</ref><sp/>&amp;d)<sp/>:<sp/>data(d)<sp/>{}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>true<sp/>if<sp/>&apos;a&apos;<sp/>should<sp/>come<sp/>before<sp/>&apos;b&apos;<sp/>on<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLess(<ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;a,<sp/><ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;b)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>b)</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLess(data.arr[a],<sp/>data.arr[b]);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal">};</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="struct_title_sort" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_title_sort" kindref="compound">TitleSort</ref><sp/>:<sp/><ref refid="struct_sort_base" kindref="compound">SortBase</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><ref refid="struct_title_sort" kindref="compound">TitleSort</ref>(<ref refid="struct_data_list" kindref="compound">DataList</ref><sp/>&amp;d)<sp/>:<sp/><ref refid="struct_sort_base" kindref="compound">SortBase</ref>(d)<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLess(<ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;a,<sp/><ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;b)</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>isLessStatic(a,<sp/>b);<sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Kludge<sp/>city,<sp/>but<sp/>it<sp/>works<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLessStatic(<ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;a,<sp/><ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;b)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>boost::algorithm::ilexicographical_compare(a.tigInfo.title,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>b.tigInfo.title);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="struct_rate_sort" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_rate_sort" kindref="compound">RateSort</ref><sp/>:<sp/><ref refid="struct_sort_base" kindref="compound">SortBase</ref></highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="struct_rate_sort" kindref="compound">RateSort</ref>(<ref refid="struct_data_list" kindref="compound">DataList</ref><sp/>&amp;d)<sp/>:<sp/><ref refid="struct_sort_base" kindref="compound">SortBase</ref>(d)<sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isLess(<ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;a,<sp/><ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;b)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a.rateCount<sp/>==<sp/>0)<sp/>a.rating<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b.rateCount<sp/>==<sp/>0)<sp/>b.rating<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Does<sp/>&apos;a&apos;<sp/>have<sp/>a<sp/>rating?<sp/>If<sp/>so,<sp/>sort<sp/>by<sp/>rating.<sp/>This<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>covers<sp/>the<sp/>case<sp/>where<sp/>&apos;b&apos;<sp/>has<sp/>no<sp/>rating<sp/>(b.rating<sp/>=<sp/>-1).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a.rating<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sort<sp/>equal<sp/>ratings<sp/>by<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(a.rating<sp/>==<sp/>b.rating)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TitleSort::isLessStatic(a,<sp/>b);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.rating<sp/>&gt;<sp/>b.rating;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&apos;a&apos;<sp/>has<sp/>no<sp/>rating.<sp/>What<sp/>about<sp/>b?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(b.rating<sp/>&gt;=<sp/>0)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>yes,<sp/>then<sp/>always<sp/>put<sp/>&apos;b&apos;<sp/>first.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Neither<sp/>has<sp/>a<sp/>rating.<sp/>Sort<sp/>by<sp/>title<sp/>instead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TitleSort::isLessStatic(a,<sp/>b);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal">};</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;file,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Json::Value<sp/>&amp;v)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>file<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>writeJson(file,<sp/>v,<sp/>writeFast);</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline lineno="84"><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">.setBase(basedir);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>reader.loadData(</highlight><highlight class="keyword">get</highlight><highlight class="normal">.getPath(</highlight><highlight class="stringliteral">&quot;all_games.json&quot;</highlight><highlight class="normal">),<sp/>data);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>cout<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Loaded<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>data.arr.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>games\n&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>Json::Value<sp/>tigdata;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;data.arr.size();<sp/>i++)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_data_list_1_1_entry" kindref="compound">DataList::Entry</ref><sp/>&amp;e<sp/>=<sp/>data.arr[i];</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_data_list_1_1_tig_info" kindref="compound">DataList::TigInfo</ref><sp/>&amp;t<sp/>=<sp/>e.tigInfo;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Json::Value<sp/>val;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;title&quot;</highlight><highlight class="normal">]<sp/>=<sp/>t.title;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">string</highlight><highlight class="normal"><sp/>shrt<sp/>=<sp/>t.desc;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(shrt.size()<sp/>&gt;<sp/>100)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shrt<sp/>=<sp/>shrt.substr(0,100)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;...&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;desc&quot;</highlight><highlight class="normal">]<sp/>=<sp/>shrt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;shot300&quot;</highlight><highlight class="normal">]<sp/>=<sp/>t.shot300x260;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;homepage&quot;</highlight><highlight class="normal">]<sp/>=<sp/>t.homepage;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;rating&quot;</highlight><highlight class="normal">]<sp/>=<sp/>e.rating;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;dev&quot;</highlight><highlight class="normal">]<sp/>=<sp/>t.devname;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(t.isDemo)</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val[</highlight><highlight class="stringliteral">&quot;isdemo&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tigdata[e.urlname]<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>a<sp/>list<sp/>sorted<sp/>by<sp/>rating</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>vector&lt;int&gt;<sp/>games(data.arr.size());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;games.size();<sp/>i++)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>games[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>sort(games.begin(),<sp/>games.end(),<sp/><ref refid="struct_rate_sort" kindref="compound">RateSort</ref>(data));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>Json::Value<sp/>allByRate;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;games.size();<sp/>i++)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>allByRate.append(data.arr[games[i]].urlname);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>category<sp/>lists</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="struct_tag_sorter" kindref="compound">TagSorter</ref><sp/>tags;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>vector&lt;TagSorter::Entry&gt;<sp/>taglist;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>tags.process(data);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>tags.makeTagList(games,<sp/>taglist);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>Json::Value<sp/>tagsByRate;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;taglist.size();<sp/>i++)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_tag_sorter_1_1_entry" kindref="compound">TagSorter::Entry</ref><sp/>&amp;e<sp/>=<sp/>taglist[i];</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!e.important)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Json::Value<sp/>list;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;e.games.size();<sp/>i++)</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.append(data.arr[games[e.games[i]]].urlname);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tagsByRate[e.tag]<sp/>=<sp/>list;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>Json::Value<sp/>output;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;gamedata&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tigdata;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;all_by_rate&quot;</highlight><highlight class="normal">]<sp/>=<sp/>allByRate;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>output[</highlight><highlight class="stringliteral">&quot;tags_by_rate&quot;</highlight><highlight class="normal">]<sp/>=<sp/>tagsByRate;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>write(</highlight><highlight class="stringliteral">&quot;web_gamedata.json&quot;</highlight><highlight class="normal">,<sp/>output);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/Tiggit/web/gen_webdata.cpp"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.0">
  <compounddef id="json__internalmap_8inl" kind="file">
    <compoundname>json_internalmap.inl</compoundname>
    <innerclass refid="class_default_value_map_allocator" prot="public">DefaultValueMapAllocator</innerclass>
    <innerclass refid="struct_dummy_map_allocator_initializer" prot="public">DummyMapAllocatorInitializer</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="json__internalmap_8inl_1a3247543fb9356684ae51c89bb166f671" prot="public" static="yes" mutable="no">
        <type>struct DummyMapAllocatorInitializer</type>
        <definition>struct DummyMapAllocatorInitializer  dummyMapAllocatorInitializer</definition>
        <argsstring></argsstring>
        <name>dummyMapAllocatorInitializer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/libs/jsoncpp/src/json_internalmap.inl" line="148"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="json__internalmap_8inl_1a61f84122d9f0d9fbd6f991895edc92f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ValueMapAllocator *&amp;</type>
        <definition>static ValueMapAllocator*&amp; mapAllocator</definition>
        <argsstring>()</argsstring>
        <name>mapAllocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/ericgallager/Tiggit/libs/jsoncpp/src/json_internalmap.inl" line="137" bodyfile="/Users/ericgallager/Tiggit/libs/jsoncpp/src/json_internalmap.inl" bodystart="136" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>included<sp/>by<sp/>json_value.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>everything<sp/>is<sp/>within<sp/>Json<sp/>namespace</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>class<sp/>ValueInternalMap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//////////////////////////////////////////////////////////////////</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal">ValueInternalLink::ValueInternalLink()</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/>:<sp/>previous_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/>,<sp/>next_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal">}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal">ValueInternalLink::~ValueInternalLink()</highlight></codeline>
<codeline lineno="22"><highlight class="normal">{<sp/></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=0;<sp/>index<sp/>&lt;<sp/>itemPerLink;<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!items_[index].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!items_[index].isMemberNameStatic()<sp/>)</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(<sp/>keys_[index]<sp/>);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal">ValueMapAllocator::~ValueMapAllocator()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>JSON_USE_SIMPLE_INTERNAL_ALLOCATOR</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_default_value_map_allocator" kindref="compound">DefaultValueMapAllocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueMapAllocator</highlight></codeline>
<codeline lineno="43"><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>overridden<sp/>from<sp/>ValueMapAllocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>*newMap()</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueInternalMap();</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>*newMapCopy(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueInternalMap(<sp/>other<sp/>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destructMap(<sp/>ValueInternalMap<sp/>*map<sp/>)</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalLink<sp/>*allocateMapBuckets(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueInternalLink[size];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseMapBuckets(<sp/>ValueInternalLink<sp/>*links<sp/>)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>links;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalLink<sp/>*allocateMapLink()</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueInternalLink();</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseMapLink(<sp/>ValueInternalLink<sp/>*link<sp/>)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="79"><highlight class="normal">};</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="82" refid="class_default_value_map_allocator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_default_value_map_allocator" kindref="compound">DefaultValueMapAllocator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ValueMapAllocator</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>overridden<sp/>from<sp/>ValueMapAllocator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>*newMap()</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalMap<sp/>*map<sp/>=<sp/>mapsAllocator_.allocate();</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(map)<sp/>ValueInternalMap();<sp/></highlight><highlight class="comment">//<sp/>placement<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>*newMapCopy(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalMap<sp/>*map<sp/>=<sp/>mapsAllocator_.allocate();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(map)<sp/>ValueInternalMap(<sp/>other<sp/>);<sp/></highlight><highlight class="comment">//<sp/>placement<sp/>new</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>destructMap(<sp/>ValueInternalMap<sp/>*map<sp/>)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>map<sp/>)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>map-&gt;~ValueInternalMap();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapsAllocator_.release(<sp/>map<sp/>);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalLink<sp/>*allocateMapBuckets(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size<sp/>)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>ValueInternalLink[size];</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseMapBuckets(<sp/>ValueInternalLink<sp/>*links<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>[]<sp/>links;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ValueInternalLink<sp/>*allocateMapLink()</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>*link<sp/>=<sp/>linksAllocator_.allocate();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memset(<sp/>link,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(ValueInternalLink)<sp/>);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>releaseMapLink(<sp/>ValueInternalLink<sp/>*link<sp/>)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;~ValueInternalLink();</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>linksAllocator_.release(<sp/>link<sp/>);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/>BatchAllocator&lt;ValueInternalMap,1&gt;<sp/>mapsAllocator_;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>BatchAllocator&lt;ValueInternalLink,1&gt;<sp/>linksAllocator_;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ValueMapAllocator<sp/>*&amp;mapAllocator()</highlight></codeline>
<codeline lineno="137"><highlight class="normal">{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_default_value_map_allocator" kindref="compound">DefaultValueMapAllocator</ref><sp/>defaultAllocator;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>ValueMapAllocator<sp/>*mapAllocator<sp/>=<sp/>&amp;defaultAllocator;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mapAllocator;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">DummyMapAllocatorInitializer<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>DummyMapAllocatorInitializer()<sp/></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapAllocator();<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>mapAllocator()<sp/>statics<sp/>are<sp/>initialized<sp/>before<sp/>main().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal">}<sp/>dummyMapAllocatorInitializer;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="comment">//<sp/>h(K)<sp/>=<sp/>value<sp/>*<sp/>K<sp/>&gt;&gt;<sp/>w<sp/>;<sp/>with<sp/>w<sp/>=<sp/>32<sp/>&amp;<sp/>K<sp/>prime<sp/>w.r.t.<sp/>2^32.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="155"><highlight class="comment">use<sp/>linked<sp/>list<sp/>hash<sp/>map.<sp/></highlight></codeline>
<codeline lineno="156"><highlight class="comment">buckets<sp/>array<sp/>is<sp/>a<sp/>container.</highlight></codeline>
<codeline lineno="157"><highlight class="comment">linked<sp/>list<sp/>element<sp/>contains<sp/>6<sp/>key/values.<sp/>(memory<sp/>=<sp/>(16+4)<sp/>*<sp/>6<sp/>+<sp/>4<sp/>=<sp/>124)</highlight></codeline>
<codeline lineno="158"><highlight class="comment">value<sp/>have<sp/>extra<sp/>state:<sp/>valid,<sp/>available,<sp/>deleted</highlight></codeline>
<codeline lineno="159"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">ValueInternalMap::ValueInternalMap()</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>:<sp/>buckets_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>,<sp/>tailLink_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/>,<sp/>bucketsSize_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/>,<sp/>itemCount_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal">ValueInternalMap::ValueInternalMap(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/>:<sp/>buckets_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/>,<sp/>tailLink_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/>,<sp/>bucketsSize_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/>,<sp/>itemCount_(<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="176"><highlight class="normal">{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/>reserve(<sp/>other.itemCount_<sp/>);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/>IteratorState<sp/>it;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/>IteratorState<sp/>itEnd;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/>other.makeBeginIterator(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/>other.makeEndIterator(<sp/>itEnd<sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>!equals(it,itEnd);<sp/>increment(it)<sp/>)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStatic;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*memberName<sp/>=<sp/>key(<sp/>it,<sp/>isStatic<sp/>);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>&amp;aValue<sp/>=<sp/>value(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>resolveReference(memberName,<sp/>isStatic)<sp/>=<sp/>aValue;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">ValueInternalMap<sp/>&amp;</highlight></codeline>
<codeline lineno="193"><highlight class="normal">ValueInternalMap::operator<sp/>=(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/>ValueInternalMap<sp/>dummy(<sp/>other<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/>swap(<sp/>dummy<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal">}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal">ValueInternalMap::~ValueInternalMap()</highlight></codeline>
<codeline lineno="202"><highlight class="normal">{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>buckets_<sp/>)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>BucketIndex<sp/>bucketIndex<sp/>=0;<sp/>bucketIndex<sp/>&lt;<sp/>bucketsSize_;<sp/>++bucketIndex<sp/>)</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>*link<sp/>=<sp/>buckets_[bucketIndex].next_;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>link<sp/>)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>*linkToRelease<sp/>=<sp/>link;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>link-&gt;next_;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapAllocator()-&gt;releaseMapLink(<sp/>linkToRelease<sp/>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>mapAllocator()-&gt;releaseMapBuckets(<sp/>buckets_<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal">ValueInternalMap::swap(<sp/>ValueInternalMap<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/>ValueInternalLink<sp/>*tempBuckets<sp/>=<sp/>buckets_;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/>buckets_<sp/>=<sp/>other.buckets_;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>other.buckets_<sp/>=<sp/>tempBuckets;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/>ValueInternalLink<sp/>*tempTailLink<sp/>=<sp/>tailLink_;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/>tailLink_<sp/>=<sp/>other.tailLink_;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/>other.tailLink_<sp/>=<sp/>tempTailLink;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>tempBucketsSize<sp/>=<sp/>bucketsSize_;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/>bucketsSize_<sp/>=<sp/>other.bucketsSize_;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/>other.bucketsSize_<sp/>=<sp/>tempBucketsSize;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>tempItemCount<sp/>=<sp/>itemCount_;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/>itemCount_<sp/>=<sp/>other.itemCount_;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/>other.itemCount_<sp/>=<sp/>tempItemCount;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="239"><highlight class="normal">ValueInternalMap::clear()</highlight></codeline>
<codeline lineno="240"><highlight class="normal">{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/>ValueInternalMap<sp/>dummy;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/>swap(<sp/>dummy<sp/>);</highlight></codeline>
<codeline lineno="243"><highlight class="normal">}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">ValueInternalMap::BucketIndex<sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal">ValueInternalMap::size()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="248"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>itemCount_;</highlight></codeline>
<codeline lineno="250"><highlight class="normal">}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal">ValueInternalMap::reserveDelta(<sp/>BucketIndex<sp/>growth<sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reserve(<sp/>itemCount_<sp/>+<sp/>growth<sp/>);</highlight></codeline>
<codeline lineno="256"><highlight class="normal">}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="259"><highlight class="normal">ValueInternalMap::reserve(<sp/>BucketIndex<sp/>newItemCount<sp/>)</highlight></codeline>
<codeline lineno="260"><highlight class="normal">{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!buckets_<sp/><sp/>&amp;&amp;<sp/><sp/>newItemCount<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>buckets_<sp/>=<sp/>mapAllocator()-&gt;allocateMapBuckets(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bucketsSize_<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>tailLink_<sp/>=<sp/>&amp;buckets_[0];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>BucketIndex<sp/>idealBucketCount<sp/>=<sp/>(newItemCount<sp/>+<sp/>ValueInternalLink::itemPerLink)<sp/>/<sp/>ValueInternalLink::itemPerLink;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*</highlight></codeline>
<codeline lineno="273"><highlight class="normal">ValueInternalMap::find(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="274"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bucketsSize_<sp/>)</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>HashKey<sp/>hashedKey<sp/>=<sp/>hash(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>bucketIndex<sp/>=<sp/>hashedKey<sp/>%<sp/>bucketsSize_;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalLink<sp/>*current<sp/>=<sp/>&amp;buckets_[bucketIndex];<sp/></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>!=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>=<sp/>current-&gt;next_<sp/>)</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>BucketIndex<sp/>index=0;<sp/>index<sp/>&lt;<sp/>ValueInternalLink::itemPerLink;<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current-&gt;items_[index].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strcmp(<sp/>key,<sp/>current-&gt;keys_[index]<sp/>)<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;current-&gt;items_[index];</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">Value<sp/>*</highlight></codeline>
<codeline lineno="296"><highlight class="normal">ValueInternalMap::find(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>*constThis<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">Value<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>constThis-&gt;find(<sp/>key<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal">Value<sp/>&amp;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">ValueInternalMap::resolveReference(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStatic<sp/>)</highlight></codeline>
<codeline lineno="306"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/>HashKey<sp/>hashedKey<sp/>=<sp/>hash(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bucketsSize_<sp/>)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BucketIndex<sp/>bucketIndex<sp/>=<sp/>hashedKey<sp/>%<sp/>bucketsSize_;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>**previous<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BucketIndex<sp/>index;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ValueInternalLink<sp/>*current<sp/>=<sp/>&amp;buckets_[bucketIndex];<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>!=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>&amp;current-&gt;next_,<sp/>current<sp/>=<sp/>current-&gt;next_<sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>index=0;<sp/>index<sp/>&lt;<sp/>ValueInternalLink::itemPerLink;<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>current-&gt;items_[index].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setNewItem(<sp/>key,<sp/>isStatic,<sp/>current,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strcmp(<sp/>key,<sp/>current-&gt;keys_[index]<sp/>)<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>current-&gt;items_[index];</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>reserveDelta(<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unsafeAdd(<sp/>key,<sp/>isStatic,<sp/>hashedKey<sp/>);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal">ValueInternalMap::remove(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/>HashKey<sp/>hashedKey<sp/>=<sp/>hash(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!bucketsSize_<sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>bucketIndex<sp/>=<sp/>hashedKey<sp/>%<sp/>bucketsSize_;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>ValueInternalLink<sp/>*link<sp/>=<sp/>&amp;buckets_[bucketIndex];<sp/></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>!=<sp/>0;<sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>link-&gt;next_<sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BucketIndex<sp/>index;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>=0;<sp/>index<sp/>&lt;<sp/>ValueInternalLink::itemPerLink;<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>link-&gt;items_[index].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>strcmp(<sp/>key,<sp/>link-&gt;keys_[index]<sp/>)<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>doActualRemove(<sp/>link,<sp/>index,<sp/>bucketIndex<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal">ValueInternalMap::doActualRemove(<sp/>ValueInternalLink<sp/>*link,<sp/></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BucketIndex<sp/>index,</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BucketIndex<sp/>bucketIndex<sp/>)</highlight></codeline>
<codeline lineno="361"><highlight class="normal">{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>find<sp/>last<sp/>item<sp/>of<sp/>the<sp/>bucket<sp/>and<sp/>swap<sp/>it<sp/>with<sp/>the<sp/>&apos;removed&apos;<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>removed<sp/>items<sp/>flags<sp/>to<sp/>&apos;available&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>last<sp/>page<sp/>only<sp/>contains<sp/>&apos;available&apos;<sp/>items,<sp/>then<sp/>desallocate<sp/>it<sp/>(it&apos;s<sp/>empty)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/>ValueInternalLink<sp/>*&amp;lastLink<sp/>=<sp/>getLastLinkInBucket(<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>lastItemIndex<sp/>=<sp/>1;<sp/></highlight><highlight class="comment">//<sp/>a<sp/>link<sp/>can<sp/>never<sp/>be<sp/>empty,<sp/>so<sp/>start<sp/>at<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastItemIndex<sp/>&lt;<sp/>ValueInternalLink::itemPerLink;<sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++lastItemIndex<sp/>)<sp/></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>optimized<sp/>with<sp/>dicotomic<sp/>search</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lastLink-&gt;items_[lastItemIndex].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>lastUsedIndex<sp/>=<sp/>lastItemIndex<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/>Value<sp/>*valueToDelete<sp/>=<sp/>&amp;link-&gt;items_[index];</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/>Value<sp/>*valueToPreserve<sp/>=<sp/>&amp;lastLink-&gt;items_[lastUsedIndex];</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>valueToDelete<sp/>!=<sp/>valueToPreserve<sp/>)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueToDelete-&gt;swap(<sp/>*valueToPreserve<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>lastUsedIndex<sp/>==<sp/>0<sp/>)<sp/><sp/></highlight><highlight class="comment">//<sp/>page<sp/>is<sp/>now<sp/>empty</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>remove<sp/>it<sp/>from<sp/>bucket<sp/>linked<sp/>list<sp/>and<sp/>delete<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>*linkPreviousToLast<sp/>=<sp/>lastLink-&gt;previous_;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>linkPreviousToLast<sp/>!=<sp/>0<sp/>)<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>can<sp/>not<sp/>deleted<sp/>bucket<sp/>link.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mapAllocator()-&gt;releaseMapLink(<sp/>lastLink<sp/>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>linkPreviousToLast-&gt;next_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lastLink<sp/>=<sp/>linkPreviousToLast;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Value<sp/>dummy;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueToPreserve-&gt;swap(<sp/>dummy<sp/>);<sp/></highlight><highlight class="comment">//<sp/>restore<sp/>deleted<sp/>to<sp/>default<sp/>Value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valueToPreserve-&gt;setItemUsed(<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/>--itemCount_;</highlight></codeline>
<codeline lineno="397"><highlight class="normal">}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">ValueInternalLink<sp/>*&amp;</highlight></codeline>
<codeline lineno="401"><highlight class="normal">ValueInternalMap::getLastLinkInBucket(<sp/>BucketIndex<sp/>bucketIndex<sp/>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal">{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>bucketIndex<sp/>==<sp/>bucketsSize_<sp/>-<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>tailLink_;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/>ValueInternalLink<sp/>*&amp;previous<sp/>=<sp/>buckets_[bucketIndex+1].previous_;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!previous<sp/>)</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previous<sp/>=<sp/>&amp;buckets_[bucketIndex];</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>previous;</highlight></codeline>
<codeline lineno="409"><highlight class="normal">}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal">Value<sp/>&amp;</highlight></codeline>
<codeline lineno="413"><highlight class="normal">ValueInternalMap::setNewItem(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStatic,</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>*link,<sp/></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BucketIndex<sp/>index<sp/>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal">{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*duplicatedKey<sp/>=<sp/>valueAllocator()-&gt;makeMemberName(<sp/>key<sp/>);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/>++itemCount_;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>link-&gt;keys_[index]<sp/>=<sp/>duplicatedKey;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>link-&gt;items_[index].setItemUsed();</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>link-&gt;items_[index].setMemberNameIsStatic(<sp/>isStatic<sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>link-&gt;items_[index];<sp/></highlight><highlight class="comment">//<sp/>items<sp/>already<sp/>default<sp/>constructed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal">}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal">Value<sp/>&amp;</highlight></codeline>
<codeline lineno="428"><highlight class="normal">ValueInternalMap::unsafeAdd(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key,<sp/></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isStatic,<sp/></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HashKey<sp/>hashedKey<sp/>)</highlight></codeline>
<codeline lineno="431"><highlight class="normal">{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>bucketsSize_<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;ValueInternalMap::unsafeAdd():<sp/>internal<sp/>logic<sp/>error.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>bucketIndex<sp/>=<sp/>hashedKey<sp/>%<sp/>bucketsSize_;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/>ValueInternalLink<sp/>*&amp;previousLink<sp/>=<sp/>getLastLinkInBucket(<sp/>bucketIndex<sp/>);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/>ValueInternalLink<sp/>*link<sp/>=<sp/>previousLink;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/>BucketIndex<sp/>index;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>=0;<sp/>index<sp/>&lt;<sp/>ValueInternalLink::itemPerLink;<sp/>++index<sp/>)</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>link-&gt;items_[index].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>index<sp/>==<sp/>ValueInternalLink::itemPerLink<sp/>)<sp/></highlight><highlight class="comment">//<sp/>need<sp/>to<sp/>add<sp/>a<sp/>new<sp/>page</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ValueInternalLink<sp/>*newLink<sp/>=<sp/>mapAllocator()-&gt;allocateMapLink();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link-&gt;next_<sp/>=<sp/>newLink;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>previousLink<sp/>=<sp/>newLink;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>link<sp/>=<sp/>newLink;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>setNewItem(<sp/>key,<sp/>isStatic,<sp/>link,<sp/>index<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal">ValueInternalMap::HashKey<sp/></highlight></codeline>
<codeline lineno="455"><highlight class="normal">ValueInternalMap::hash(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*key<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="456"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/>HashKey<sp/>hash<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>*key<sp/>)</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>hash<sp/>+=<sp/>*key++<sp/>*<sp/>37;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash;</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="465"><highlight class="normal">ValueInternalMap::compare(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ValueInternalMap<sp/>&amp;other<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="466"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>sizeDiff(<sp/>itemCount_<sp/>-<sp/>other.itemCount_<sp/>);</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>sizeDiff<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sizeDiff;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Strict<sp/>order<sp/>guaranty<sp/>is<sp/>required.<sp/>Compare<sp/>all<sp/>keys<sp/>FIRST,<sp/>then<sp/>compare<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/>IteratorState<sp/>it;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/>IteratorState<sp/>itEnd;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/>makeBeginIterator(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/>makeEndIterator(<sp/>itEnd<sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>!equals(it,itEnd);<sp/>increment(it)<sp/>)</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>!other.find(<sp/>key(<sp/>it<sp/>)<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>All<sp/>keys<sp/>are<sp/>equals,<sp/>let&apos;s<sp/>compare<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/>makeBeginIterator(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<sp/>;<sp/>!equals(it,itEnd);<sp/>increment(it)<sp/>)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>*otherValue<sp/>=<sp/>other.find(<sp/>key(<sp/>it<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>valueDiff<sp/>=<sp/>value(it).compare(<sp/>*otherValue<sp/>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>valueDiff<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>valueDiff;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="495"><highlight class="normal">ValueInternalMap::makeBeginIterator(<sp/>IteratorState<sp/>&amp;it<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="496"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/>it.map_<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">ValueInternalMap<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/>it.bucketIndex_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/>it.itemIndex_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/>it.link_<sp/>=<sp/>buckets_;</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="505"><highlight class="normal">ValueInternalMap::makeEndIterator(<sp/>IteratorState<sp/>&amp;it<sp/>)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="506"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/>it.map_<sp/>=<sp/></highlight><highlight class="keyword">const_cast&lt;</highlight><highlight class="normal">ValueInternalMap<sp/>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<sp/>this<sp/>);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/>it.bucketIndex_<sp/>=<sp/>bucketsSize_;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/>it.itemIndex_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/>it.link_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal">ValueInternalMap::equals(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;other<sp/>)</highlight></codeline>
<codeline lineno="516"><highlight class="normal">{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x.map_<sp/>==<sp/>other.map_<sp/><sp/></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>x.bucketIndex_<sp/>==<sp/>other.bucketIndex_<sp/><sp/></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>x.link_<sp/>==<sp/>other.link_</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/><sp/>x.itemIndex_<sp/>==<sp/>other.itemIndex_;</highlight></codeline>
<codeline lineno="521"><highlight class="normal">}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="525"><highlight class="normal">ValueInternalMap::incrementBucket(<sp/>IteratorState<sp/>&amp;iterator<sp/>)</highlight></codeline>
<codeline lineno="526"><highlight class="normal">{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/>++iterator.bucketIndex_;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.bucketIndex_<sp/>&lt;=<sp/>iterator.map_-&gt;bucketsSize_,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ValueInternalMap::increment():<sp/>attempting<sp/>to<sp/>iterate<sp/>beyond<sp/>end.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator.bucketIndex_<sp/>==<sp/>iterator.map_-&gt;bucketsSize_<sp/>)</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iterator.link_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iterator.link_<sp/>=<sp/>&amp;(iterator.map_-&gt;buckets_[iterator.bucketIndex_]);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/>iterator.itemIndex_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="535"><highlight class="normal">}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal">ValueInternalMap::increment(<sp/>IteratorState<sp/>&amp;iterator<sp/>)</highlight></codeline>
<codeline lineno="540"><highlight class="normal">{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.map_,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>iterator<sp/>using<sp/>invalid<sp/>iterator.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/>++iterator.itemIndex_;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator.itemIndex_<sp/>==<sp/>ValueInternalLink::itemPerLink<sp/>)</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.link_<sp/>!=<sp/>0,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;ValueInternalMap::increment():<sp/>attempting<sp/>to<sp/>iterate<sp/>beyond<sp/>end.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iterator.link_<sp/>=<sp/>iterator.link_-&gt;next_;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator.link_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>incrementBucket(<sp/>iterator<sp/>);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator.link_-&gt;items_[iterator.itemIndex_].isItemAvailable()<sp/>)</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>incrementBucket(<sp/>iterator<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal">}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="559"><highlight class="normal">ValueInternalMap::decrement(<sp/>IteratorState<sp/>&amp;iterator<sp/>)</highlight></codeline>
<codeline lineno="560"><highlight class="normal">{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator.itemIndex_<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.map_,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>iterate<sp/>using<sp/>invalid<sp/>iterator.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>iterator.link_<sp/>==<sp/>&amp;iterator.map_-&gt;buckets_[iterator.bucketIndex_]<sp/>)</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.bucketIndex_<sp/>&gt;<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>iterate<sp/>beyond<sp/>beginning.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--(iterator.bucketIndex_);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iterator.link_<sp/>=<sp/>iterator.link_-&gt;previous_;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>iterator.itemIndex_<sp/>=<sp/>ValueInternalLink::itemPerLink<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="576"><highlight class="normal">ValueInternalMap::key(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;iterator<sp/>)</highlight></codeline>
<codeline lineno="577"><highlight class="normal">{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.link_,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>iterate<sp/>using<sp/>invalid<sp/>iterator.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator.link_-&gt;keys_[iterator.itemIndex_];</highlight></codeline>
<codeline lineno="580"><highlight class="normal">}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*</highlight></codeline>
<codeline lineno="583"><highlight class="normal">ValueInternalMap::key(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;iterator,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>&amp;isStatic<sp/>)</highlight></codeline>
<codeline lineno="584"><highlight class="normal">{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.link_,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>iterate<sp/>using<sp/>invalid<sp/>iterator.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/>isStatic<sp/>=<sp/>iterator.link_-&gt;items_[iterator.itemIndex_].isMemberNameStatic();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator.link_-&gt;keys_[iterator.itemIndex_];</highlight></codeline>
<codeline lineno="588"><highlight class="normal">}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal">Value<sp/>&amp;</highlight></codeline>
<codeline lineno="592"><highlight class="normal">ValueInternalMap::value(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;iterator<sp/>)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/>JSON_ASSERT_MESSAGE(<sp/>iterator.link_,<sp/></highlight><highlight class="stringliteral">&quot;Attempting<sp/>to<sp/>iterate<sp/>using<sp/>invalid<sp/>iterator.&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>iterator.link_-&gt;items_[iterator.itemIndex_];</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="600"><highlight class="normal">ValueInternalMap::distance(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>IteratorState<sp/>&amp;y<sp/>)</highlight></codeline>
<codeline lineno="601"><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/>IteratorState<sp/>it<sp/>=<sp/>x;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<sp/>!equals(<sp/>it,<sp/>y<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>increment(<sp/>it<sp/>);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/Tiggit/libs/jsoncpp/src/json_internalmap.inl"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.0">
  <compounddef id="writer_8h" kind="file">
    <compoundname>writer.h</compoundname>
    <includes refid="value_8h" local="yes">value.h</includes>
    <includes local="no">vector</includes>
    <includes local="no">string</includes>
    <includes local="no">iostream</includes>
    <includedby refid="json_8h" local="yes">libs/jsoncpp/include/json/json.h</includedby>
    <includedby refid="json__value_8cpp" local="no">libs/jsoncpp/src/json_value.cpp</includedby>
    <includedby refid="json__writer_8cpp" local="no">libs/jsoncpp/src/json_writer.cpp</includedby>
    <incdepgraph>
      <node id="575">
        <label>config.h</label>
        <link refid="config_8h_source"/>
      </node>
      <node id="573">
        <label>value.h</label>
        <link refid="value_8h_source"/>
        <childnode refid="574" relation="include">
        </childnode>
        <childnode refid="576" relation="include">
        </childnode>
        <childnode refid="577" relation="include">
        </childnode>
        <childnode refid="578" relation="include">
        </childnode>
      </node>
      <node id="574">
        <label>forwards.h</label>
        <link refid="forwards_8h_source"/>
        <childnode refid="575" relation="include">
        </childnode>
      </node>
      <node id="576">
        <label>string</label>
      </node>
      <node id="578">
        <label>map</label>
      </node>
      <node id="577">
        <label>vector</label>
      </node>
      <node id="572">
        <label>libs/jsoncpp/include/json/writer.h</label>
        <link refid="writer.h"/>
        <childnode refid="573" relation="include">
        </childnode>
        <childnode refid="577" relation="include">
        </childnode>
        <childnode refid="576" relation="include">
        </childnode>
        <childnode refid="579" relation="include">
        </childnode>
      </node>
      <node id="579">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="588">
        <label>config.hpp</label>
        <link refid="config_8hpp_source"/>
        <childnode refid="585" relation="include">
        </childnode>
        <childnode refid="589" relation="include">
        </childnode>
      </node>
      <node id="594">
        <label>newstab.hpp</label>
        <link refid="newstab_8hpp_source"/>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="593">
        <label>json_rated.hpp</label>
        <link refid="json__rated_8hpp_source"/>
        <childnode refid="589" relation="include">
        </childnode>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="590">
        <label>json_installed.hpp</label>
        <link refid="json__installed_8hpp_source"/>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="584">
        <label>tiggit.cpp</label>
        <link refid="tiggit_8cpp_source"/>
      </node>
      <node id="589">
        <label>gameinfo.hpp</label>
        <link refid="gameinfo_8hpp_source"/>
        <childnode refid="590" relation="include">
        </childnode>
        <childnode refid="591" relation="include">
        </childnode>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="587">
        <label>web/gen_webdata.cpp</label>
        <link refid="gen__webdata_8cpp_source"/>
      </node>
      <node id="585">
        <label>data_reader.hpp</label>
        <link refid="data__reader_8hpp_source"/>
        <childnode refid="586" relation="include">
        </childnode>
        <childnode refid="584" relation="include">
        </childnode>
        <childnode refid="587" relation="include">
        </childnode>
      </node>
      <node id="596">
        <label>libs/jsoncpp/src/json_value.cpp</label>
        <link refid="json__value_8cpp_source"/>
      </node>
      <node id="586">
        <label>auto_update.hpp</label>
        <link refid="auto__update_8hpp_source"/>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="583">
        <label>auth.hpp</label>
        <link refid="auth_8hpp_source"/>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="581">
        <label>libs/jsoncpp/include/json/json.h</label>
        <link refid="json_8h_source"/>
        <childnode refid="582" relation="include">
        </childnode>
        <childnode refid="590" relation="include">
        </childnode>
      </node>
      <node id="580">
        <label>libs/jsoncpp/include/json/writer.h</label>
        <link refid="writer.h"/>
        <childnode refid="581" relation="include">
        </childnode>
        <childnode refid="596" relation="include">
        </childnode>
        <childnode refid="597" relation="include">
        </childnode>
      </node>
      <node id="591">
        <label>listkeeper.hpp</label>
        <link refid="listkeeper_8hpp_source"/>
        <childnode refid="584" relation="include">
        </childnode>
      </node>
      <node id="582">
        <label>readjson.hpp</label>
        <link refid="readjson_8hpp_source"/>
        <childnode refid="583" relation="include">
        </childnode>
        <childnode refid="585" relation="include">
        </childnode>
        <childnode refid="588" relation="include">
        </childnode>
        <childnode refid="592" relation="include">
        </childnode>
        <childnode refid="593" relation="include">
        </childnode>
        <childnode refid="594" relation="include">
        </childnode>
        <childnode refid="595" relation="include">
        </childnode>
        <childnode refid="587" relation="include">
        </childnode>
      </node>
      <node id="592">
        <label>fix_json.cpp</label>
        <link refid="fix__json_8cpp_source"/>
      </node>
      <node id="597">
        <label>libs/jsoncpp/src/json_writer.cpp</label>
        <link refid="json__writer_8cpp_source"/>
      </node>
      <node id="595">
        <label>tigmaker.cpp</label>
        <link refid="tigmaker_8cpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="protocol_json_1_1_j_s_o_n___a_p_i" prot="public">Json::JSON_API</innerclass>
    <innerclass refid="protocol_json_1_1_j_s_o_n___a_p_i" prot="public">Json::JSON_API</innerclass>
    <innerclass refid="protocol_json_1_1_j_s_o_n___a_p_i" prot="public">Json::JSON_API</innerclass>
    <innerclass refid="protocol_json_1_1_j_s_o_n___a_p_i" prot="public">Json::JSON_API</innerclass>
    <innernamespace refid="namespace_json">Json</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#ifndef<sp/>JSON_WRITER_H_INCLUDED</highlight></codeline>
<codeline lineno="2"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/>define<sp/>JSON_WRITER_H_INCLUDED</highlight></codeline>
<codeline lineno="3"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&quot;value.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/>include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">Json<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Value;</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">JSON_API<sp/>Writer</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Writer();</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>write(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">JSON_API<sp/>FastWriter<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Writer</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FastWriter();</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~FastWriter(){}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>enableYAMLCompatibility();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>overridden<sp/>from<sp/>Writer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>write(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>document_;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>yamlCompatiblityEnabled_;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">JSON_API<sp/>StyledWriter:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Writer</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StyledWriter();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~StyledWriter(){}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:<sp/></highlight><highlight class="comment">//<sp/>overridden<sp/>from<sp/>Writer</highlight></codeline>
<codeline lineno="76"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>write(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeArrayValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultineArray(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeIndent();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeWithIndent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>indent();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unindent();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeCommentBeforeValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeCommentAfterValueOnSameLine(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCommentForValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>normalizeEOL(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text<sp/>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>ChildValues;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ChildValues<sp/>childValues_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>document_;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>indentString_;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightMargin_;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indentSize_;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addChildValues_;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">JSON_API<sp/>StyledStreamWriter</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>StyledStreamWriter(<sp/>std::string<sp/>indentation=</highlight><highlight class="stringliteral">&quot;\t&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>~StyledStreamWriter(){}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>write(<sp/>std::ostream<sp/>&amp;out,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeArrayValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>isMultineArray(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>pushValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeIndent();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeWithIndent(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>indent();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>unindent();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeCommentBeforeValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>writeCommentAfterValueOnSameLine(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hasCommentForValue(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="protocol_json_1_1_j_s_o_n___a_p_i_1a3a85c4423131080eb9300546d6130dfd" kindref="member" tooltip="Create a default Value of the given type.">Value</ref><sp/>&amp;value<sp/>);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/>normalizeEOL(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;text<sp/>);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>ChildValues;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ChildValues<sp/>childValues_;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::ostream*<sp/>document_;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>indentString_;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rightMargin_;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>indentation_;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>addChildValues_;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>JSON_API<sp/>valueToString(<sp/>Int<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>JSON_API<sp/>valueToString(<sp/>UInt<sp/>value<sp/>);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>JSON_API<sp/>valueToString(<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value<sp/>);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>JSON_API<sp/>valueToString(<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/>std::string<sp/>JSON_API<sp/>valueToQuotedString(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*value<sp/>);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/>std::ostream&amp;<sp/><ref refid="namespace_json_1a87bc83d7e90fc666d28aa16727deda2f" kindref="member" tooltip="Output using the StyledStreamWriter.">operator&lt;&lt;</ref>(<sp/>std::ostream&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Value<sp/>&amp;root<sp/>);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>Json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>JSON_WRITER_H_INCLUDED</highlight></codeline>
    </programlisting>
    <location file="/Users/ericgallager/Tiggit/libs/jsoncpp/include/json/writer.h"/>
  </compounddef>
</doxygen>
